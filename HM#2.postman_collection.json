{
	"info": {
		"_postman_id": "f3f04328-0fc8-4633-a32f-c00be7329a27",
		"name": "HM#2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"var responsebody = pm.response.text()\r",
							"\r",
							"pm.test(\"Body matches string\", () => {\r",
							"    pm.expect(responsebody).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"console.log(\"string = \" + responsebody)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2.Спарсить response body в json\r",
							"const responseJson = pm.response.json();\r",
							"// 3.Проверить, что name в ответе равно name s request\r",
							"pm.test(\" user name is ilnur\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(\"ilnur\");\r",
							"});\r",
							"// 4.Проверить, что age в ответе равно age s request\r",
							"pm.test(\"user age = 27\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(\"27\");\r",
							"});\r",
							"// 5.Проверить, что salary в ответе равно salary s request\r",
							"pm.test(\"user salary = 1500\", () => {\r",
							"    pm.expect(responseJson.salary).to.eql(1500);\r",
							"});\r",
							"// 6.Спарсить request\r",
							"var req = request.data\r",
							"console.log(req)\r",
							"// 7.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req name ilnur\", () => {\r",
							"    pm.expect(responseJson.name).to.eql(req.name)\r",
							"})\r",
							"// 8.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req age 27\", () => {\r",
							"    pm.expect(responseJson.age).to.eql(req.age)\r",
							"})\r",
							"// 9.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_salary= parseInt(req.salary)\r",
							"let salary1=responseJson.salary\r",
							"pm.test(\"req salary 1500\", () => {\r",
							"    pm.expect(salary1).to.eql(req_salary)\r",
							"})\r",
							"\r",
							"// 10.Вывести в консоль параметр family из response.\r",
							"console.log(\"param family=\", responseJson.family)\r",
							"\r",
							"\r",
							"// 11.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"resp_salary1,5=req_salary*4\", () => {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(req_salary * 4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "ilnur",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Статус код 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2.Спарсить response body в json.\r",
							"const resp_json=pm.response.json()\r",
							"// 3.Спарсить request.\r",
							"\r",
							"var req_1=pm.request.url.query.toObject()\r",
							"console.log(\"request =\",req_1)\r",
							"\r",
							"// 4.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_name=req_name\", () => {\r",
							"    pm.expect(resp_json.name).to.eql(req_1.name)\r",
							"});\r",
							"\r",
							"// 5.Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"resp_age=req_age\", () => {\r",
							"    pm.expect(resp_json.age).to.eql(req_1.age)\r",
							"});\r",
							"\r",
							"//6.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var req_1_salary=parseInt(req_1.salary)\r",
							"pm.test(\"resp_salary=req_salary\", () => {\r",
							"    pm.expect(resp_json.salary).to.eql(req_1_salary)\r",
							"});\r",
							"\r",
							"// 6.Вывести в консоль параметр family из response.\r",
							"console.log(\"family =\", resp_json.family)\r",
							"\r",
							"// 7.Проверить, что у параметра dog есть параметры name.\r",
							"let res_dog=resp_json.family.pets.dog\r",
							"pm.test(\"dog have name\", () => {\r",
							"    pm.expect(res_dog).to.have.property(\"name\")       \r",
							"});\r",
							"console.log(\"dog =\",res_dog)\r",
							"\r",
							"// 8.Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", () => {\r",
							"    pm.expect(res_dog).to.have.property(\"age\")\r",
							"});\r",
							"// 9.Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog name= Luky\", () => {\r",
							"    pm.expect(res_dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"console.log(\"dog name =\", res_dog.name , typeof(res_dog.name) )\r",
							"// 10.Проверить, что параметр age имеет значение 4. \r",
							"pm.test(\"dog age=4\", () => {\r",
							"    pm.expect(res_dog.age).to.eql(4)\r",
							"});\r",
							"console.log(\"dog age =\", res_dog.age, typeof(res_dog.age))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=ilnur&age=27&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "ilnur"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"const resp_json=pm.response.json()\r",
							"console.log(\"response=\", resp_json)\r",
							"// 3. Спарсить request.\r",
							"var req=pm.request.url.query.toObject()\r",
							"console.log(\"request=\", req)\r",
							"// 4.Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_name=req_name\", () =>{\r",
							"    pm.expect(resp_json.name).to.eql(req.name)\r",
							"});\r",
							"\r",
							"// 5.Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"resp_age=req_age\", () => {\r",
							"    pm.expect(resp_json.age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"// 6.Вывести в консоль параметр salary из request.\r",
							"console.log(\"req_salary=\", req.salary)\r",
							"\r",
							" // 7.Вывести в консоль параметр salary из response.\r",
							" console.log(\"resp_salary=\", resp_json.salary)\r",
							"\r",
							" // 8.Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"resp_salary0=\", resp_json.salary[0])\r",
							"\r",
							"// 9.Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary1=\", resp_json.salary[1])\r",
							"\r",
							"// 10.Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"resp_salary2=\", resp_json.salary[2])\r",
							"\r",
							"// 11.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary0=req_salary\", () => {\r",
							"    pm.expect(resp_json.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"console.log(\"resp_salary0=req_salary\", resp_json.salary[0], req.salary, typeof(req.salary) )\r",
							"\r",
							"// 12.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"resp_salary1=req_salary*2\", () => {\r",
							"    pm.expect(+resp_json.salary[1]).to.eql(req.salary*2)\r",
							"});\r",
							"\r",
							"// 13.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary2=req_salary*3\", () => {\r",
							"    pm.expect(+resp_json.salary[2]).to.eql(req.salary*3)\r",
							"});\r",
							"// 14.Создать в окружении переменную name\r",
							"pm.environment.set(\"name\",  \"\");\r",
							"\r",
							"// 15.Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"\");\r",
							"// 16.Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"\");\r",
							"// 17.Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_json.name);\r",
							"\r",
							"// 18/Передать в окружение переменную age\r",
							"pm.environment.set(\"age\",resp_json.age); \r",
							"// 19.Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_json.salary[0]);\r",
							"// 20.Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(let sal in resp_json.salary){\r",
							"    console.log(\"salary\" +sal+ \"=\"+resp_json.salary[sal])\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=ilnur&age=27&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "ilnur"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2.Спарсить response body в json.\r",
							"const resp_body=pm.response.json()\r",
							" \r",
							"// 3.Спарсить request.\r",
							"var req=request.data\r",
							"console.log(req)\r",
							"\r",
							"// 4.Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response have param start_qa_salary\", () => {\r",
							"    pm.expect(resp_body).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// 5.Проверить, что json response имеет параметр qa_salary_after_6_months \r",
							"// 6.Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"// 7.Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// 8.Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"// 9.Проверить, что json response имеет параметр person\r",
							"pm.test(\"response have params\", () => {\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_6_months\")\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_12_months\")\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"    pm.expect(resp_body).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"    pm.expect(resp_body).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							" console.log(\"res have start qa salary\", resp_body)\r",
							"\r",
							"\r",
							"// 10.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"// 11.Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"//12.Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"//13.Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"//14.Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"salary equals\", () => {\r",
							"    pm.expect(resp_body.start_qa_salary).to.eql(+req.salary)\r",
							"    pm.expect(resp_body.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"    pm.expect(resp_body.qa_salary_after_12_months).to.eql(req.salary*2.7)\r",
							"    pm.expect(resp_body['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"    pm.expect(resp_body['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"});\r",
							"\r",
							"//15.Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let elem1=resp_body.person.u_name[1]\r",
							"pm.test(\"elem1=req salary\", () => {\r",
							"    pm.expect(elem1).to.eql(+req.salary)\r",
							"});\r",
							"\r",
							"// 16.Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age=req_age\", () => {\r",
							"    pm.expect(resp_body.person.u_age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"// 17.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary5=req salary*4.2\", () => {\r",
							"    pm.expect(resp_body.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"});\r",
							"\r",
							"// 18.***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for(let elem in resp_body.person) {\r",
							"    console.log(\"elems  \" +elem+\"=\"+resp_body.person[elem])\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}